{"version":3,"sources":["Images/beerLogo.png","store.js","Reducers.js","Components/Nav/MenuList/MenuList.js","Components/Nav/Nav.js","Components/Home/BrewButton/BrewButton.js","Components/Home/Fermenter/FermenterFetch.js","Components/Home/Fermenter/FermentationStatus/Clean.js","Components/Home/Fermenter/FermentationStatus/Conditioning.js","Components/Home/Fermenter/FermentationStatus/Dirty.js","Components/Home/Fermenter/FermentationStatus/Empty.js","Components/Home/Fermenter/FermentationStatus/Fermenting.js","Components/Home/Fermenter/FermentationStatus/Sanitize.js","Components/Home/Fermenter/FermenterView.js","Components/Home/Fermenter/Fermenter.js","Components/Home/Fermenter/FermenterContainer.js","Components/Home/Fermenter/FermenterActions.js","Components/Home/HomeView.js","Components/Home/Home.js","Components/ProductionTank/AppComponents/AppBar/MenuItems/MenuItems.js","Components/ProductionTank/AppComponents/AppBar/AppBar.js","Components/ProductionTank/AppComponents/AppBar/AppBarContainer.js","Components/ProductionTank/AppComponents/SubComponents/Button.js","Components/ProductionTank/AppComponents/SubComponents/Time.js","Components/ProductionTank/AppComponents/SubComponents/Number.js","Components/ProductionTank/AppComponents/Brix/Brix.js","Components/ProductionTank/AppComponents/Brix/BrixContainer.js","Components/ProductionTank/AppComponents/SubComponents/toggle.js","Components/ProductionTank/AppComponents/SubComponents/Date.js","Components/ProductionTank/AppComponents/CIP/CIP.js","Components/ProductionTank/AppComponents/CIP/CIPContainer.js","Components/ProductionTank/FermenterIcon/FermenterIcon.js","Components/ProductionTank/FermenterIcon/FermenterIconContainer.js","Components/ProductionTank/AppComponents/Sanitize/Sanitze.js","Components/ProductionTank/AppComponents/Sanitize/SanitizeContaner.js","Components/ProductionTank/AppComponents/Spund/Spund.js","Components/ProductionTank/AppComponents/Spund/SpundContainer.js","Components/ProductionTank/AppComponents/Temperature/Temperature.js","Components/ProductionTank/AppComponents/Temperature/TemparatureContainer.js","Components/ProductionTank/AppComponents/Yeast/Yeast.js","Components/ProductionTank/AppComponents/Yeast/YeastContainer.js","Components/ProductionTank/ProductionTank.js","Components/ProductionTank/ProductionFetch.js","Components/ProductionTank/ProductionActions.js","Components/ProductionTank/ProductionContainer.js","Components/Brew/StartBatch/StyleBatch.js","Components/Brew/StartBatch/StartBatch.js","Components/Brew/BrewMetrics/BrewMetricsStyle.js","Components/Brew/BrewMetrics/BrewMetrics.js","Components/Brew/Transfer/Transfer.js","Components/Brew/BrewView.js","Components/Brew/BrewFetch.js","Components/Brew/Brew.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","storeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","cTanks","state","arguments","length","undefined","action","type","value","emptyCTanks","selectTank","Object","objectSpread","status","store","createStore","applyMiddleware","thunk","MenuList","props","react_default","a","createElement","Menu_default","id","anchorEl","open","Boolean","onClose","handleClose","Link","to","className","MenuItem_default","onClick","Nav","handleClick","event","_this","setState","currentTarget","this","classes","root","AppBar_default","position","appbar","Toolbar_default","toolbar","src","logo","alt","Typography_default","variant","color","grow","IconButton_default","menuButton","aria-owns","aria-haspopup","icons_Menu_default","Nav_MenuList_MenuList","Component","withStyles","flexGrow","backgroundColor","fontFamily","fontSize","display","flexDirection","textAlign","padding","BrewButton","getFermenters","fetch","body","JSON","stringify","headers","content-type","method","e","console","log","Clean","presentDate","date","moment","format","fermenter","cip1","cip2","Conditioning","number","style","bbls","reduce","acc","bbl","tankTemp","fermentingBrix","Dirty","Empty","Fermenting","brix","index","Sanitize","ppm","FermenterView","tanks","map","key","fermenting","conditioning","empty","dirty","clean","sanitize","setTank","tank","FermentationStatus_Fermenting","FermentationStatus_Conditioning","FermentationStatus_Clean","FermentationStatus_Dirty","FermentationStatus_Sanitize","FermentationStatus_Empty","Fermenter","orderTank","i","w","switchObjA","switchObjB","getTanks","Fermenter_FermenterView","withRouter","connect","dispatch","then","response","json","data","emptyTanks","runOff","push","history","concat","HomeView","Components_Nav_Nav","Home_BrewButton_BrewButton","FermenterContainer","Home","Home_HomeView","MenuItems","menuOptions","handleStatusChange","ButtonAppBar","valueAllLowerCase","toLowerCase","statusUpdate","getComponentStatus","componentStatus","getReduxStatus","determineReduxOrComponent","reduxStatus","sanitizeText","firstLetter","firstLetterUpperCase","toUpperCase","replace","dipslayStatus","AppBar_MenuItems_MenuItems","marginLeft","marginRight","boxShadow","AppBar","ProductionTankButton","words","theme","textField","spacing","unit","maxWidth","minWidth","input","width","cssLabel","&$cssFocused","fontWeight","cssFocused","cssUnderline","&:after","borderBottomColor","cssOutlinedInput","&$cssFocused $notchedOutline","borderColor","notchedOutline","TextField_default","currentTime","Date","getTime","arrInput","lastDate","diffTime","parse","days","duration","asDays","Math","round","compareTemp","getChangeDate","timeDiff","getTemperatureDays","name","label","margin","InputLabelProps","focused","InputProps","endAdornment","InputAdornment_default","readOnly","valueCalc","onChange","onFocus","changeSelect","onBlur","measurement","Brix","brixAvg","brixObj","reduxFermBrix","fBrix","reduxRunBrix","runOffBrixAvg","userAddedBrix","selectBrix","componentFermBrix","SubComponents_Number","userInput","changeBrix","SubComponents_Time","colorSwitchBase","green","&$colorChecked","& + $colorBar","colorBar","colorChecked","height","marginTop","marginBottom","formControl","FormControlLabel_default","control","Switch_default","checked","switchBase","bar","toDayMonthYear","utc","reduxDate","productionTankDate","shrink","CIP","reduxClean","componentClean","select","selectClean","displayToggle","redux","component","SubComponents_Date","productionTankDateA","reduxDate1","productionTankDateB","reduxDate2","toggle","fillColor","fermenterIcon","fill","xmlns","xmlnsXlink","version","x","y","viewBox","xmlSpace","cx","cy","r","points","d","FermenterIcon","reduxSanitize","componentSanitize","selectSanitize","ppmObj","componentPPM","reduxPPM","sanitizeSelect","changeSanitize","Spund","reduxSpund","componentSpund","spund","selectSpund","componentPressure","spundPressure","reduxPressure","userInteraction","selectPSI","displayPSI","TemperatureList","temp","tempObj","componentTemp","userAddTemp","reduxTemp","YeastAction","yeastDump1","yeastDump1Redux","yeastDump2","yeastDump2Redux","ProductionTank","selectName","target","defineProperty","switchToggle","changeToggleSelect","changeStatus","reduxRunOff","renderRedirect","handleTransfer","batch","getParams","match","params","tankObj","catch","err","error","sendUpdate","_i","_loopState","entries","_tankObj$key","_ref3","_ref2","slicedToArray","componentDidMount","getTankParams","FermenterIconContainer","AppBarContainer","TemparatureContainer","renderStatus","BrixContainer","YeastContainer","SpundContainer","Button","yeast2","CIPContainer","SanitizeContaner","sanitizeDate","getFermenter","close","pressure","previousBatch","brewBatch","prevNum","batchNum","batchEnter","enter","inputNames","handleBrewNumber","options","prevId","handleBatch","optionArr","charCodeAt","num","String","fromCharCode","userIdOptions","currentStyle","prevStyle","styleOptions","openTanks","currentTank","prevTank","tankOptions","option","StartBatch","StartBatch_StyleBatch","handleDelete","handleEnter","strikeVolume","mashTemp","spargeVolume","startingBrix","kettleVolume","whirlPoolVolume","fmVolume","required","runOffTemp","notes","BrewMetrics","BrewMetrics_BrewMetricsStyle","Transfer","BrewView","Brew_StartBatch_StartBatch","Brew_BrewMetrics_BrewMetrics","Brew_Transfer_Transfer","updateBatch","batchObj","getLastSubmit","BrewContainer","opentTanks","submit","runInterval","val","currentState","updateMetricData","preventDefault","getData","createNewBatch","setInterval","clearInterval","deleteBrew","deleteBatch","fillFermenters","componentWillUnmount","changeNull","batchVal","updateStateBatchBrewing","lastBatch","updateStateLastCompletedBrew","batchArr","inputBatchSequence","brewIsEnterObj","lastBrewEnter","Brew_BrewView","App","Switch","Route","path","exact","render","Components_Home_Home","Brew","ProductionContainer","ReactDOM","es","BrowserRouter","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c6fef9d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beerLogo.000cdd1b.png\";","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\r\nimport {cTanks, emptyCTanks, selectTank} from './Reducers';\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst reducers = combineReducers({cTanks, emptyCTanks, selectTank})\r\n\r\nlet store= createStore(reducers, storeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n\r\n","\r\n\r\nexport const cTanks = (state = [], action) =>{\r\n  switch (action.type) {\r\n    case \"GET_CTANKS\":\r\n      return action.value;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const emptyCTanks = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"EMPTY_CTANKS\":\r\n      return action.value;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const selectTank = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"SET_TANK\":\r\n      return action.value\r\n    case \"CHANGE_STATUS\":\r\n      return {...state, status: \"conditioning\"};\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst MenuList = (props) => {\r\n\r\n    return (\r\n      <div>\r\n        <Menu\r\n          id=\"simple-menu\"\r\n          anchorEl={props.anchorEl} \r\n          open={Boolean(props.anchorEl)}\r\n          onClose={props.handleClose}>\r\n          <Link to='/' className='links'>\r\n            <MenuItem onClick={props.handleClose}>Home</MenuItem>\r\n          </Link>\r\n          <Link to='/Brew' className='links'>\r\n            <MenuItem onClick={props.handleClose}>Brew</MenuItem>\r\n          </Link>\r\n          <MenuItem onClick={props.handleClose}>Historic Brew</MenuItem>\r\n        </Menu>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default MenuList;","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport logo from '../../Images/beerLogo.png';\r\nimport MenuList from './MenuList/MenuList';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport '../../App.css';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n\r\n  appbar: {\r\n    backgroundColor: '#5c4925',    \r\n  },\r\n\r\n  grow: {\r\n    fontFamily: 'Fira Sans Condensed',\r\n    color: '#e6e5d4',\r\n    fontSize: '25px',\r\n    flexGrow: 1\r\n  },\r\n\r\n  toolbar: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    textAlign: 'center',  \r\n  },\r\n\r\n  menuButton: {\r\n    padding: 0\r\n  }\r\n\r\n};\r\n\r\nclass Nav extends Component {\r\n\r\n  state = {\r\n    anchorEl: null,\r\n  };\r\n\r\n  handleClick = event => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  render () {\r\n    const { anchorEl } = this.state;\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\" className={classes.appbar}>\r\n          <Toolbar className={classes.toolbar}>\r\n            <img src={logo} alt='Thirsy Planet Logo' id='logo' />\r\n            <Typography variant=\"h1\" color=\"inherit\" className={classes.grow}>\r\n              Very Good Brewing Company\r\n            </Typography>\r\n            <IconButton className={classes.menuButton} color=\"inherit\"\r\n              aria-owns={anchorEl ? 'simple-menu' : undefined}\r\n              aria-haspopup=\"true\"\r\n              onClick={this.handleClick}>\r\n              <MenuIcon/>\r\n            </IconButton>\r\n            <MenuList anchorEl ={this.state.anchorEl} handleClose={this.handleClose}/>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\n\r\nexport default withStyles(styles)(Nav);","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport '../../../App.css';\r\n\r\nconst BrewButton = () => {\r\n\r\n    return (\r\n        \r\n        <Link to='/Brew' className='links'>\r\n            <button className=\"allButtons\">\r\n                Brew Batch\r\n            </button>\r\n        </Link>\r\n    )\r\n\r\n}\r\n\r\nexport default BrewButton;","\r\nexport function getFermenters() {\r\n  try {\r\n    return fetch(\"/fermenters\", {\r\n        body: JSON.stringify(),\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        },\r\n        method: 'GET'\r\n        })\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n}","import moment from 'moment';\r\nimport React from 'react';\r\n\r\nimport '../../../../App.css';\r\n\r\nconst Clean = (props) => {\r\n\r\n    const presentDate = (date) => {\r\n        return moment(date).format(\"MMM Do\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"fermenterData\">\r\n            <h4>Clean</h4>\r\n            <h4>CIP Date: {props.fermenter.cip1 ? presentDate(props.fermenter.cip1) : null}</h4>\r\n            <h4>CIP Date: {props.fermenter.cip2 ? presentDate(props.fermenter.cip2) : null}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Clean;","import React from 'react';\r\nimport '../../../../App.css';\r\n\r\nconst Conditioning = (props) => {\r\n    return (\r\n        <div className=\"fermenterData\">\r\n            <h4>Batch Number: {props.fermenter.number}</h4>\r\n            <h4>Beer Style: {props.fermenter.style}</h4>\r\n            <h4>Volume: {props.fermenter.bbls.reduce( (acc, bbl) => (acc +bbl), 0)} bbls</h4>\r\n            <h4>Temp: {props.fermenter.tankTemp[props.fermenter.tankTemp.length-1] ? props.fermenter.tankTemp[props.fermenter.tankTemp.length-1].tankTemp: 0} F</h4>\r\n            <h4>Final Brix: {props.fermenter.fermentingBrix[props.fermenter.fermentingBrix.length-1] ? props.fermenter.fermentingBrix[props.fermenter.fermentingBrix.length-1].fermentingBrix : null}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Conditioning;","import moment from 'moment';\r\nimport React from 'react';\r\n\r\nimport '../../../../App.css';\r\n\r\nconst Dirty = (props) => {\r\n    const ifNoCIPDate = \"Needs CIP\";\r\n\r\n    const presentDate = (date) => {\r\n        return moment(date).format(\"MMM Do\")\r\n    }\r\n    return (\r\n        <div className=\"fermenterData\">\r\n            <h4>Dirty</h4>\r\n            <h4>CIP Date: {props.fermenter.cip1 ? presentDate(props.fermenter.cip1) : ifNoCIPDate}</h4>\r\n            <h4>CIP Date: {props.fermenter.cip2 ? presentDate(props.fermenter.cip2) : ifNoCIPDate}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dirty;","import React from 'react';\r\nimport '../../../../App.css';\r\n\r\nconst Empty = (props) => {\r\n    return (\r\n        <div className=\"fermenterData\">\r\n            <h4>Empty</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Empty;","import React from 'react';\r\nimport '../../../../App.css';\r\n\r\nconst Fermenting = (props) => {\r\n   \r\n    return (\r\n        <div>\r\n            <h4>Batch Number: {props.fermenter.number}</h4>\r\n            <h4>Beer Style: {props.fermenter.style}</h4>\r\n            <h4>Volume: {props.fermenter.bbls.reduce( (acc, bbl) => (acc +bbl), 0)} bbls</h4>\r\n            <h4>Temp: {props.fermenter.tankTemp[props.fermenter.tankTemp.length-1] ? props.fermenter.tankTemp[props.fermenter.tankTemp.length-1].tankTemp: 0} F</h4>\r\n            <h4>Starting Brix: {props.fermenter.brix.reduce((acc,brix,index) => acc+(brix-acc)/(index+1),0)} brix </h4>\r\n            <h4>Fermenting Brix: {props.fermenter.fermentingBrix[props.fermenter.fermentingBrix.length-1] ? props.fermenter.fermentingBrix[props.fermenter.fermentingBrix.length-1].fermentingBrix : null}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Fermenting;","import React from 'react';\r\n\r\nimport '../../../../App.css';\r\n\r\nconst Sanitize = (props) => {\r\n\r\n    return (\r\n        <div className=\"fermenterData\">\r\n            <h4>Sanitized</h4>\r\n            <h4>PPM: {props.fermenter.ppm ? props.fermenter.ppm : null}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sanitize;","import React from 'react';\r\n\r\nimport Clean from './FermentationStatus/Clean';\r\nimport Conditioning from './FermentationStatus/Conditioning';\r\nimport Dirty from './FermentationStatus/Dirty';\r\nimport Empty from './FermentationStatus/Empty';\r\nimport Fermenting from './FermentationStatus/Fermenting';\r\nimport Sanitize from './FermentationStatus/Sanitize';\r\n\r\nimport '../../../App.css';\r\n\r\nconst FermenterView = (props) => {    \r\n    return (\r\n        <section>\r\n            {props.tanks.map( (fermenter,index) => {\r\n                const status = {\r\n                    fermenting: {\r\n                        backgroundColor: \"#5d9732\"\r\n                    },\r\n                    conditioning: {\r\n                        backgroundColor: \"#3490db\"\r\n                    },\r\n                    empty: {\r\n                        backgroundColor: \"#d1d0bb\"\r\n                    },\r\n                    dirty: {\r\n                        backgroundColor: \"#d1d0bb\"\r\n                    },\r\n                    clean: {\r\n                        backgroundColor: \"#707070\"\r\n                    },\r\n                    sanitize: {\r\n                        backgroundColor: \"white\"\r\n                    }\r\n                }\r\n                \r\n                const renderFermenter = () => {\r\n                    if (fermenter.status === 'fermenting') {\r\n                        return <Fermenting fermenter={fermenter} />\r\n                    } else if (fermenter.status === 'conditioning') {\r\n                        return <Conditioning fermenter={fermenter} />\r\n                    } else if (fermenter.status === 'clean') {\r\n                        return <Clean fermenter= {fermenter} />\r\n                    } else if (fermenter.status === 'dirty') {\r\n                        return <Dirty fermenter={fermenter} />\r\n                    } else if (fermenter.status === 'sanitize') {\r\n                        return <Sanitize fermenter={fermenter} />\r\n                    } else {\r\n                        return <Empty fermenter={fermenter} />\r\n                    }\r\n                }\r\n\r\n                return (\r\n                    \r\n                    <div className = \"cFermenter\" key={index} style={{backgroundColor : status[fermenter.status].backgroundColor}}>\r\n                        <button onClick={() =>{props.setTank(fermenter)}} className=\"TankNumber\">\r\n                            <h3 id=\"fermenterVal\">{fermenter.tank}</h3>\r\n                        </button>\r\n                        <div className=\"fermenterData\">\r\n                            {renderFermenter()}\r\n                        </div>\r\n                        \r\n                     </div>   \r\n                )\r\n            })}\r\n        </section>\r\n    )\r\n    \r\n}\r\n\r\nexport default FermenterView;","import React, { Component } from 'react';\r\nimport FermenterView from './FermenterView';\r\n\r\nclass Fermenter extends Component {\r\n\r\n    componentDidMount () {\r\n      this.props.getTanks()\r\n    }\r\n\r\n    \r\n    orderTank = () => {\r\n        for(let i=0, w=1; w<this.props.tanks.length; i++, w++) {\r\n            let firstItem = this.props.tanks[i].tank;\r\n            let secondItem = this.props.tanks[w].tank;\r\n            \r\n\r\n            if(firstItem > secondItem) {\r\n                let switchObjA = this.props.tanks[i];\r\n                let switchObjB = this.props.tanks[w]\r\n                this.props.tanks[w] = switchObjA\r\n                this.props.tanks[i] = switchObjB\r\n                this.orderTank()\r\n            }\r\n        }\r\n    }\r\n\r\n    // use sort to change into one line\r\n\r\n    render () {\r\n        // Set tank order from database \r\n        this.orderTank();\r\n        return (\r\n            <FermenterView tanks={this.props.tanks} setTank={this.props.setTank}/>\r\n        )\r\n    }   \r\n    \r\n}\r\n\r\nexport default Fermenter;","import {connect} from 'react-redux';\r\nimport {getTanks,setTank} from './FermenterActions';\r\nimport {withRouter} from 'react-router-dom';\r\nimport Fermenter from './Fermenter';\r\n\r\n\r\nfunction mapDispatchToProps(dispatch, props){\r\n      return {\r\n      getTanks: () => dispatch(getTanks()),\r\n      setTank: tank => dispatch(setTank(tank, props.history))\r\n      }\r\n   }\r\n\r\n\r\n   const mapStateToProps = (state) => {\r\n      return {\r\n         tanks: state.cTanks\r\n      }\r\n   }\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Fermenter));","import {getFermenters} from './FermenterFetch';\r\n\r\nexport function getTanks() {\r\n    return function(dispatch) {\r\n        return getFermenters()\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // FIND only empty tanks\r\n                const emptyTanks = data.reduce( (acc,tank) => {\r\n                    if(!tank.runOff) {\r\n                      acc.push(tank.tank);\r\n                    }\r\n                    return acc\r\n                }, [])\r\n\r\n                // change order of tanks here\r\n                dispatch({\r\n                    type: \"GET_CTANKS\",\r\n                    value: data\r\n                })\r\n\r\n                dispatch({\r\n                    type: \"EMPTY_CTANKS\",\r\n                    value: emptyTanks\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport function setTank(tank,history) {\r\n    return function (dispatch) {\r\n        dispatch({\r\n                type: \"SET_TANK\",\r\n                value: tank\r\n                })\r\n\r\n        history.push(`/ProductionTank/${tank.tank}`)\r\n    }\r\n}","import Nav from '../Nav/Nav';\r\nimport BrewButton from '../Home/BrewButton/BrewButton';\r\nimport React from 'react';\r\nimport Fermenter from './Fermenter/FermenterContainer'; \r\nimport '../../App.css';\r\n\r\n\r\nconst HomeView = () => {\r\n    return (\r\n        <main>\r\n            <Nav />\r\n            <section className='topTitle'>\r\n                <BrewButton/>\r\n            </section>\r\n            <section id=\"brewFarm\">\r\n                <Fermenter/>\r\n                {/* <BriteTank/> */}\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default HomeView;","import React from 'react';\r\nimport HomeView from './HomeView';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <HomeView/>\r\n    )\r\n    \r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nconst MenuItems = (props) => {\r\n    const menuOptions = {\r\n        fermenting: 'Conditioning'\r\n    }    \r\n\r\n    return (\r\n      <div>\r\n        <Menu\r\n          id=\"simple-menu\"\r\n          anchorEl={props.anchorEl} \r\n          open={Boolean(props.anchorEl)}\r\n          onClose={props.handleClose}>\r\n          <div onClick ={()=> {props.handleStatusChange(menuOptions[props.status])}} className=\"links\">\r\n              <MenuItem onClick={props.handleClose}>{menuOptions[props.status]}</MenuItem>\r\n          </div>\r\n        </Menu>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default MenuItems;","import React, {Component} from 'react';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MenuItems from './MenuItems/MenuItems';\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  fermenting: {\r\n    backgroundColor: '#5d9732',\r\n    boxShadow: 'none'\r\n  },\r\n  conditioning: {\r\n    backgroundColor: '#3490db',\r\n    boxShadow: 'none'\r\n  },\r\n  empty: {\r\n    backgroundColor: \"#5c4925\",\r\n    boxShadow: 'none'\r\n  },\r\n  dirty: {\r\n    backgroundColor: \"#5c4925\",\r\n    boxShadow: 'none'\r\n  },\r\n  clean: {\r\n    backgroundColor: \"#707070\",\r\n    boxShadow: 'none'\r\n  },\r\n  sanitize: {\r\n    backgroundColor: \"white\",\r\n    boxShadow: 'none'\r\n  },\r\n  sanitizeText: {\r\n   color: 'black'\r\n  }\r\n};\r\n\r\nclass ButtonAppBar extends Component {\r\n\r\n  state = {\r\n    anchorEl: null,\r\n  };\r\n\r\n  handleClick = event => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  handleStatusChange = (value) => {\r\n    const valueAllLowerCase = value.toLowerCase();\r\n    this.props.statusUpdate(valueAllLowerCase);\r\n  }\r\n\r\n  render () {\r\n    const getComponentStatus = this.props.componentStatus;\r\n    const getReduxStatus = this.props.status;\r\n    const { classes } = this.props;\r\n    const {anchorEl} = this.state;\r\n\r\n    const determineReduxOrComponent = (componentStatus, reduxStatus) => {\r\n      if (componentStatus) {\r\n        return componentStatus\r\n      } else {\r\n        return reduxStatus\r\n      }\r\n    }\r\n\r\n    const dipslayStatus = (status) => {\r\n      const firstLetter = status[0];\r\n      const firstLetterUpperCase = firstLetter.toUpperCase();\r\n      const changeLetters = status.replace(firstLetter, firstLetterUpperCase);\r\n      return changeLetters\r\n    }\r\n    \r\n    return (\r\n      <div className={classes.root} >\r\n        <AppBar position=\"static\" className={classes[determineReduxOrComponent(getComponentStatus, getReduxStatus)]}>\r\n          <Toolbar>\r\n            <Typography \r\n              variant=\"h6\" \r\n              color={determineReduxOrComponent(getComponentStatus, getReduxStatus) === 'sanitize' ? classes.sanitizeText : \"inherit\" } \r\n              className={classes.grow}\r\n            >\r\n              {this.props.tank}: {dipslayStatus(determineReduxOrComponent(getComponentStatus,getReduxStatus))}\r\n            </Typography>\r\n            {determineReduxOrComponent(getComponentStatus, getReduxStatus) === 'fermenting' ?\r\n              <IconButton \r\n                className={classes.menuButton} \r\n                aria-owns={anchorEl ? 'simple-menu' : undefined}\r\n                aria-haspopup=\"true\"\r\n                onClick={this.handleClick}>\r\n                <MenuIcon/>\r\n              </IconButton>\r\n              :\r\n              null\r\n            }\r\n            <MenuItems \r\n              anchorEl ={this.state.anchorEl} \r\n              handleClose={this.handleClose} \r\n              status={determineReduxOrComponent(getComponentStatus, getReduxStatus)} \r\n              handleStatusChange={this.handleStatusChange}/>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  \r\n}\r\n\r\nexport default withStyles(styles)(ButtonAppBar);","import {connect} from 'react-redux';\r\nimport AppBar from './AppBar';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      tank: state.selectTank.tank,\r\n      status: state.selectTank.status,\r\n      number: state.selectTank.number\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(AppBar);","import React from 'react';\r\nimport '../../../../App.css';\r\n\r\nconst ProductionTankButton = (props) => {\r\n\r\n    return (\r\n        <button className=\"allButtons\" id={props.id} onClick={props.onClick}>\r\n            {props.words}\r\n        </button> \r\n    )\r\n\r\n}\r\n\r\nexport default ProductionTankButton;","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport moment from 'moment';\r\n\r\nconst styles = theme => ({\r\n\r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit,\r\n        backgroundColor: '#d1d0bb',\r\n        maxWidth: '175px',\r\n        minWidth: '100px'\r\n      },\r\n    \r\n    input: {\r\n        color: '#5c4925',\r\n        width: 'auto'\r\n    },\r\n\r\n    cssLabel: {\r\n        '&$cssFocused': {\r\n          color: '#5c4925',\r\n          fontWeight: 'bold',\r\n          fontSize: 15\r\n        },\r\n    },\r\n    cssFocused: {},\r\n    cssUnderline: {\r\n        '&:after': {\r\n          borderBottomColor: '#5c4925',\r\n        },\r\n      },\r\n    cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n          borderColor: '#5c4925',\r\n        },\r\n      },\r\n\r\n      notchedOutline: {\r\n      },\r\n  });\r\n\r\nconst Time = (props) => {\r\n    const {classes} = props;\r\n\r\n    const getTemperatureDays = () => {\r\n        const currentDate = new Date();\r\n        const currentTime = currentDate.getTime()\r\n          \r\n        if(props.arrInput.length === 1) {\r\n            const lastDate = props.arrInput[props.arrInput.length-1].date\r\n            const update = Date.parse(lastDate)\r\n            const diffTime = currentTime - update;\r\n            const diff = new moment.duration(diffTime);\r\n            const days = diff.asDays();\r\n            return (Math.round(days *100)/100);\r\n        } else if (props.arrInput.length === 0) {\r\n            return 0\r\n        } else {\r\n            for(let i=props.arrInput.length-1; i > -1; i-- ){\r\n                let compareTemp = props.arrInput[i+1];\r\n                if (compareTemp !== undefined) {\r\n                  if (compareTemp[props.value] !== props.arrInput[i][props.value]) {\r\n                    const getChangeDate = compareTemp.date;\r\n                    const updateDate = Date.parse(getChangeDate);\r\n                    const timeDiff = currentTime - updateDate;\r\n                    const diff = new moment.duration(timeDiff)\r\n                    const days = diff.asDays();\r\n                    return (Math.round(days *100)/100);\r\n                    }\r\n                }\r\n            }\r\n          \r\n        }\r\n          \r\n    }\r\n\r\n    return (\r\n        <TextField\r\n            value={getTemperatureDays()}\r\n            type= \"number\"\r\n            name = \"Time\"\r\n            className={classes.textField} \r\n            label= \"For\"\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n                classes: {\r\n                root: classes.cssLabel,\r\n                focused: classes.cssFocused\r\n                },\r\n            }} \r\n            InputProps={{\r\n                classes: {\r\n                    focused: classes.cssLabel\r\n                },\r\n                endAdornment: <InputAdornment position=\"end\">Days</InputAdornment>,\r\n                readOnly: true\r\n            }}  >\r\n        </TextField> \r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(Time);","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n\r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit,\r\n        backgroundColor: '#d1d0bb',\r\n        maxWidth: '175px',\r\n        minWidth: '100px'\r\n      },\r\n    \r\n    input: {\r\n        color: '#5c4925',\r\n        width: 'auto'\r\n    },\r\n\r\n    cssLabel: {\r\n        '&$cssFocused': {\r\n          color: '#5c4925',\r\n          fontWeight: 'bold',\r\n          fontSize: 15\r\n        },\r\n    },\r\n    cssFocused: {},\r\n    cssUnderline: {\r\n        '&:after': {\r\n          borderBottomColor: '#5c4925',\r\n        },\r\n      },\r\n    cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n          borderColor: '#5c4925',\r\n        },\r\n      },\r\n\r\n      notchedOutline: {\r\n      },\r\n  });\r\n\r\nconst Number = (props) => {\r\n    const {classes} = props;\r\n\r\n    return (\r\n        <TextField\r\n            value={props.valueCalc}\r\n            onChange={props.onChange}\r\n            type= \"number\"\r\n            name = {props.name}\r\n            id = {props.id}\r\n            onFocus ={props.changeSelect}\r\n            onBlur = {props.changeSelect}\r\n            className={classes.textField} \r\n            variant=\"outlined\" \r\n            label= {props.label}\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n                classes: {\r\n                root: classes.cssLabel,\r\n                focused: classes.cssFocused,\r\n                },\r\n            }} \r\n            InputProps={{classes: \r\n                { root: classes.cssOutlinedInput,\r\n                focused: classes.cssFocused,\r\n                notchedOutline: classes.notchedOutline,\r\n                input: classes.input,\r\n                },\r\n                endAdornment: <InputAdornment position=\"end\">{props.measurement}</InputAdornment>\r\n            }}  >\r\n        </TextField>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(Number);","import React from 'react';\r\n\r\nimport Time from '../SubComponents/Time';\r\nimport Number from '../SubComponents/Number';\r\n\r\nimport '../../../../App.css';\r\n\r\nconst Brix = (props) => {\r\n    const brixAvg = props.brix.reduce((acc,brix,index) => acc+(brix-acc)/(index+1),0);\r\n    const brixObj = {\r\n        reduxFermBrix: props.fBrix,\r\n        reduxRunBrix: props.brix,\r\n        runOffBrixAvg: brixAvg,\r\n        userAddedBrix: props.selectBrix,\r\n        componentFermBrix: props.fermentingBrix\r\n    }\r\n\r\n    const displayBrix = (brix) => {\r\n        if (brix.componentFermBrix) {\r\n            return brix.componentFermBrix\r\n        } else if(brix.userAddedBrix) {\r\n            return brix.componentFermBrix\r\n        } else if (brix.reduxFermBrix[brix.reduxFermBrix.length-1]) {\r\n            return brix.reduxFermBrix[brix.reduxFermBrix.length-1].fermentingBrix\r\n        } else if(brix.reduxRunBrix.length > 0) {\r\n            return brix.runOffBrixAvg\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"fermentationData\">\r\n            <p>Brix</p>\r\n            <div className = \"organizeFermentation\">\r\n                <Number \r\n                    valueCalc={displayBrix(brixObj)}\r\n                    onChange = {props.userInput}\r\n                    measurement = \"\"\r\n                    changeSelect={props.changeBrix}\r\n                    name= \"fermentingBrix\"\r\n                    id = \"selectBrix\"\r\n                    label= \"Brix\"\r\n                />\r\n                <Time \r\n                    arrInput={props.fBrix}\r\n                    value=\"fermentingBrix\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Brix;","import {connect} from 'react-redux';\r\nimport Brix from './Brix';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      brix: state.selectTank.brix,\r\n      fBrix: state.selectTank.fermentingBrix\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Brix);","import React from 'react';\r\n\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    colorSwitchBase: {\r\n      color: green[300],\r\n      '&$colorChecked': {\r\n      color: green[500],\r\n      '& + $colorBar': {\r\n        backgroundColor: green[500],\r\n      },\r\n    },\r\n  },\r\n  colorBar: {},\r\n  colorChecked: {},\r\n  root: {\r\n    height: 56,\r\n    marginTop: 16,\r\n    marginBottom: 8\r\n  },\r\n\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n  }\r\n})\r\n\r\nconst Toggle = (props) => {\r\n    const { classes } = props;\r\n      return(\r\n        <FormControlLabel classes ={{root: classes.root}}\r\n            control={\r\n            <Switch\r\n                checked={props.checked}\r\n                onChange={props.onChange}\r\n                value={props.value}\r\n                name = {props.name}\r\n                id = {props.id}\r\n                classes={{\r\n                switchBase: classes.colorSwitchBase,\r\n                checked: classes.colorChecked,\r\n                bar: classes.colorBar\r\n                }}\r\n            />\r\n            }\r\n            label={props.label}\r\n        />\r\n      ) \r\n    \r\n}\r\n\r\n\r\nexport default withStyles(styles)(Toggle);","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport moment from 'moment';\r\n\r\nconst styles = theme => ({\r\n\r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit,\r\n        backgroundColor: '#d1d0bb',\r\n        maxWidth: '175'\r\n      },\r\n    \r\n    input: {\r\n        color: '#5c4925',\r\n        width: 'auto'\r\n    },\r\n\r\n    cssLabel: {\r\n        '&$cssFocused': {\r\n          color: '#5c4925',\r\n          fontWeight: 'bold',\r\n          fontSize: 15\r\n        },\r\n    },\r\n    cssFocused: {},\r\n    cssUnderline: {\r\n        '&:after': {\r\n          borderBottomColor: '#5c4925',\r\n        },\r\n      },\r\n    cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n          borderColor: '#5c4925',\r\n        },\r\n      },\r\n\r\n      notchedOutline: {\r\n      },\r\n  });\r\n\r\n  const Date = (props) => {\r\n    const {classes} = props;\r\n    const toDayMonthYear = moment.utc(props.reduxDate).format('YYYY-MM-DD');\r\n\r\n    const getValue = () => {\r\n        if (props.productionTankDate) {\r\n            return props.productionTankDate\r\n        } else if (props.reduxDate) {\r\n            return toDayMonthYear\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TextField\r\n            value={getValue()}\r\n            onChange={props.onChange}\r\n            type= \"date\"\r\n            name = {props.name}\r\n            className={classes.textField} \r\n            variant=\"outlined\" \r\n            label= {props.label}\r\n            margin=\"normal\"\r\n            InputLabelProps={{\r\n                shrink: true\r\n            }} \r\n            InputProps={{classes: \r\n                { root: classes.cssOutlinedInput,\r\n                focused: classes.cssFocused,\r\n                notchedOutline: classes.notchedOutline,\r\n                input: classes.input,\r\n                }\r\n            }}  \r\n        >\r\n        </TextField>\r\n    )\r\n\r\n  }\r\n\r\n  export default withStyles(styles)(Date);","import React from 'react';\r\n\r\nimport Toggle from '../SubComponents/toggle';\r\nimport Date from '../SubComponents/Date';\r\n\r\nconst CIP = (props) => {\r\n    const reduxClean = props.reduxClean;\r\n    const componentClean = props.clean;\r\n    const select = props.selectClean;\r\n    \r\n\r\n    const displayToggle =(redux,component, select) => {\r\n      if (select) {\r\n        return component\r\n      } else {\r\n        return redux\r\n      }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"fermentationData\">\r\n            <p>CIP Date</p>\r\n            <div className = \"organizeFermentation\">\r\n                <Date \r\n                    productionTankDate={props.productionTankDateA} \r\n                    reduxDate={props.reduxDate1} \r\n                    name=\"cip1\" \r\n                    label=\"CIP 1\"\r\n                    onChange={props.userInput} \r\n                />\r\n                <Date \r\n                    productionTankDate={props.productionTankDateB} \r\n                    reduxDate={props.reduxDate2} \r\n                    name=\"cip2\"\r\n                    label=\"CIP 2\"\r\n                    onChange={props.userInput} \r\n                />                \r\n            </div>\r\n                {props.reduxDate1 || props.reduxDate2 || props.productionTankDateA || props.productionTankDateB\r\n                    ?\r\n                    <div className = \"organizeFermentation\">\r\n                        <Toggle \r\n                            checked={displayToggle(reduxClean, componentClean, select)} \r\n                            onChange={props.toggle} \r\n                            value={displayToggle(reduxClean, componentClean, select)} \r\n                            name=\"clean\" \r\n                            label=\"Clean\"\r\n                            id = \"selectClean\"\r\n                        />\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CIP;","import {connect} from 'react-redux';\r\n\r\nimport CIP from './CIP';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      reduxDate1: state.selectTank.cip1,\r\n      reduxDate2: state.selectTank.cip2,\r\n      reduxClean: state.selectTank.clean\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CIP);","import React from 'react';\r\n\r\n\r\n// Change color of background image\r\nconst fillColor = {\r\n    fermenting: \"#5d9732\",\r\n    conditioning: \"#3490db\",\r\n    empty: \"#5c4925\",\r\n    dirty: \"#5c4925\",\r\n    clean: '#707070',\r\n    sanitize: 'white'\r\n}\r\n\r\nconst fermenterIcon = (props) => {\r\n    const getComponentStatus = props.componentStatus;\r\n    const getReduxStatus = props.status;\r\n\r\n    const determineReduxOrComponent = (componentStatus, reduxStatus) => {\r\n        if (componentStatus) {\r\n          return componentStatus\r\n        } else {\r\n          return reduxStatus\r\n        }\r\n    }\r\n\r\n    return  (  \r\n    <svg fill={fillColor[determineReduxOrComponent(getComponentStatus,getReduxStatus)]} id=\"fermentationVisuals\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 432 288\"  xmlSpace=\"preserve\">\r\n        <circle cx={216} cy=\"271.3\" r={4} />\r\n        <polygon points=\"213.1,257.2 213.1,261.5 172.8,261.5 172.8,205.3 163.9,190.1 163.9,277.3 166.5,277.3 166.5,281.4 161.9,281.4   161.9,284.3 174.5,284.3 174.5,281.4 169.9,281.4 169.9,277.3 172.8,277.3 172.8,267.3 259.5,267.3 259.5,277.3 262.4,277.3   262.4,281.4 257.8,281.4 257.8,284.3 270.1,284.3 270.1,281.4 265.5,281.4 265.5,277.3 268.1,277.3 268.1,190.1 259.5,205.3   259.5,261.5 218.9,261.5 218.9,257.2 \">\r\n        </polygon>\r\n        <path fill=\"none\" d=\"M174,11.5v9.7c8.9-2.8,20.5-4.6,33.4-5.1v-4.5H174V11.5z\">\r\n        </path>\r\n        <path fill=\"none\" d=\"M224.6,11.5V16c12.9,0.6,24.5,2.4,33.4,5.1v-9.7L224.6,11.5L224.6,11.5z\">\r\n        </path>\r\n        <path d=\"M174,11.5h33.4V16c1.9-0.1,3.8-0.1,5.8-0.2v-4.3c0-3.2-2.6-5.8-5.8-5.8H174c-3.2,0-5.8,2.6-5.8,5.8v11.7  c1.8-0.7,3.7-1.4,5.8-2.1V11.5z\">\r\n        </path>\r\n        <path d=\"M224.6,11.5H258v9.7c2.1,0.6,4,1.3,5.8,2.1V11.5c0-3.2-2.6-5.8-5.8-5.8h-33.4c-3.2,0-5.8,2.6-5.8,5.8v4.3  c1.9,0,3.9,0.1,5.8,0.2V11.5z\">\r\n        </path>\r\n        <path d=\"M159.5,85.2v68.9l54.7,93.9h3.7l54.5-94.1V85.2c0,0-20.4-3-56.5-3S159.5,85.2,159.5,85.2z\">\r\n        </path>\r\n        <path d=\"M282.2,40.3v116.3l-58.7,101.1h-15l-58.8-101.1V40.3c0,0,6.3-4.3,6.3-5.2c0-4.6,4.5-8.7,12.1-11.9c1.8-0.7,3.7-1.4,5.8-2.1  c8.9-2.8,20.5-4.6,33.4-5.1c1.9-0.1,3.8-0.1,5.8-0.2c1,0,1.9,0,2.9,0s1.9,0,2.9,0c1.9,0,3.9,0.1,5.8,0.2c12.9,0.6,24.5,2.4,33.4,5.1  c2.1,0.6,4,1.3,5.8,2.1c7.6,3.2,12.1,7.3,12.1,11.9C275.9,36,282.2,40.3,282.2,40.3z M276.5,154.9V43.2c-4.9-3.5-6.3-5.5-6.3-8.1  c0-1.6-2.2-3.7-6.5-5.7c-1.6-0.8-3.4-1.5-5.6-2.2c-7.7-2.6-18.9-4.8-33.4-5.4c-1.9-0.1-3.8-0.1-5.8-0.2c-1,0-1.9,0-2.9,0  s-1.9,0-2.9,0c-2,0-3.9,0.1-5.8,0.2c-14.5,0.6-25.7,2.9-33.4,5.4c-2.1,0.7-4,1.4-5.6,2.2c-4.3,2-6.5,4-6.5,5.5  c0,2.9-1.2,4.6-6.3,8.4v112L212,252h8.4L276.5,154.9z\">\r\n        </path>\r\n      </svg>\r\n    )\r\n}\r\n\r\nexport default fermenterIcon","import {connect} from 'react-redux';\r\nimport FermenterIcon from './FermenterIcon';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      status: state.selectTank.status\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FermenterIcon);","import React from 'react';\r\n\r\nimport Toggle from '../SubComponents/toggle';\r\nimport Number from '../SubComponents/Number';\r\n\r\nconst Sanitize = (props) => {\r\n    const reduxSanitize = props.reduxSanitize;\r\n    const componentSanitize = props.sanitize;\r\n    const select = props.selectSanitize;\r\n    \r\n\r\n    const displayToggle =(redux,component, select) => {\r\n      if (select) {\r\n        return component\r\n      } else {\r\n        return redux\r\n      }\r\n    }\r\n\r\n    const ppmObj = {\r\n        componentPPM: props.ppm,\r\n        reduxPPM: props.reduxPPM,\r\n        sanitizeSelect: props.sanitizeSelect\r\n    }\r\n\r\n    const displayTemp = (ppm) => {\r\n        if (ppm.componentPPM) {\r\n            return ppm.componentPPM\r\n        } else if(ppm.sanitizeSelect) {\r\n            return ppm.componentPPM\r\n        } else if (ppm.reduxPPM) {\r\n            return ppm.reduxPPM\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"fermentationData\">\r\n            <p>Tank Sanitation</p>\r\n            <div className = \"organizeFermentation\">\r\n                <Toggle\r\n                    checked={displayToggle(reduxSanitize,componentSanitize,select)} \r\n                    onChange={props.toggle} \r\n                    value={displayToggle(reduxSanitize,componentSanitize,select)} \r\n                    name=\"sanitize\" \r\n                    label=\"Sanitize\"\r\n                    id = \"selectSanitize\"\r\n                />\r\n                {componentSanitize || (reduxSanitize && !select)\r\n                    ?\r\n                    <Number \r\n                        valueCalc={displayTemp(ppmObj)}\r\n                        onChange = {props.userInput}\r\n                        measurement = \"ppm\"\r\n                        changeSelect={props.changeSanitize}\r\n                        name= \"ppm\"\r\n                        id = \"sanitizeSelect\"\r\n                        label= \"Peracetic Acid\"\r\n                    />\r\n                    :\r\n                    null\r\n                }                         \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sanitize;","import {connect} from 'react-redux';\r\n\r\nimport Sanitize from './Sanitze';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      reduxSanitize: state.selectTank.sanitize,\r\n      reduxPPM: state.selectTank.ppm\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Sanitize);","import React from 'react';\r\n\r\nimport Number from '../SubComponents/Number';\r\nimport Toggle from '../SubComponents/toggle';\r\n\r\nimport '../../../../App.css';\r\n\r\nconst Spund = (props) => {\r\n      const reduxSpund = props.reduxSpund;\r\n      const componentSpund = props.spund;\r\n      const select = props.selectSpund;\r\n      \r\n\r\n      const displayToggle =(reduxSpund,componentSpund, select) => {\r\n        if (select) {\r\n          return componentSpund\r\n        } else {\r\n          return reduxSpund\r\n        }\r\n      }\r\n\r\n      const componentPressure = props.spundPressure\r\n      const reduxPressure = props. reduxPressure\r\n      const userInteraction = props.selectPSI\r\n      \r\n      const displayPSI = (componentPressure,reduxPressure,userInteraction ) => {\r\n        if (componentPressure) {\r\n          return componentPressure\r\n        } else if (userInteraction) {\r\n          return componentPressure\r\n        } else if (reduxPressure) {\r\n          return reduxPressure\r\n        } else {\r\n          return null\r\n        }\r\n      }\r\n\r\n      return(\r\n        <div className=\"fermentationData\">\r\n            <p>Fermentation Pressure</p>\r\n            <div className=\"organizeFermentation\">\r\n              <Toggle \r\n                checked={displayToggle(reduxSpund, componentSpund,select)} \r\n                onChange={props.toggle} \r\n                value={displayToggle(reduxSpund, componentSpund, select)} \r\n                label=\"Spund\" \r\n                name=\"spund\"\r\n                id = \"selectSpund\"\r\n              />\r\n              {componentSpund || (reduxSpund && !select)\r\n                ?\r\n                <Number \r\n                  valueCalc={displayPSI(componentPressure,reduxPressure,userInteraction)}\r\n                  onChange = {props.userInput}\r\n                  measurement = \"PSI\"\r\n                  changeSelect={props.changeSelect}\r\n                  name= \"spundPressure\"\r\n                  label= \"Pressure\"\r\n                  id = \"selectPSI\"\r\n                />\r\n                : \r\n                null}\r\n            </div>\r\n        </div>\r\n      ) \r\n    \r\n}\r\n\r\n\r\nexport default Spund;","import {connect} from 'react-redux';\r\nimport Spund from './Spund';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      reduxSpund: state.selectTank.spund,\r\n      reduxPressure: state.selectTank.spundPressure\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Spund);","import React from 'react';\r\n\r\nimport Number from '../SubComponents/Number';\r\nimport Time from '../SubComponents/Time';\r\n\r\nimport '../../../../App.css';\r\n\r\nconst TemperatureList = (props) => {\r\n    const tempObj = {\r\n        componentTemp: props.tankTemp,\r\n        userAddTemp: props.select,\r\n        reduxTemp: props.temp\r\n    }\r\n\r\n    const displayTemp = (temp) => {\r\n        if (temp.componentTemp) {\r\n            return temp.componentTemp\r\n        } else if(temp.userAddTemp) {\r\n            return temp.componentTemp\r\n        } else if (temp.reduxTemp[temp.reduxTemp.length-1]) {\r\n            return temp.reduxTemp[temp.reduxTemp.length-1].tankTemp\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"fermentationData\">\r\n            <p>Temperature</p>\r\n            <div className = \"organizeFermentation\">\r\n                <Number \r\n                    valueCalc={displayTemp(tempObj)}\r\n                    onChange = {props.userInput}\r\n                    measurement = \"F\"\r\n                    changeSelect={props.changeSelect}\r\n                    name= \"tankTemp\"\r\n                    id= \"select\"\r\n                    label = \"Temp\"\r\n                />\r\n                <Time \r\n                    arrInput={props.temp}\r\n                    value=\"tankTemp\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemperatureList;","import {connect} from 'react-redux';\r\nimport TemperatureList from './Temperature';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      temp: state.selectTank.tankTemp\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TemperatureList);","import React from 'react';\r\n\r\nimport Date from '../SubComponents/Date';\r\n\r\nimport '../../../../App.css';\r\n\r\nconst YeastAction = (props) => {\r\n     // used for props in date component    \r\n    return (\r\n        <div className=\"fermentationData\">\r\n            <p>Yeast Removal</p>\r\n            <div className = \"organizeFermentation\">\r\n                <Date \r\n                    onChange={props.userInput} \r\n                    label=\"Dump 1\" \r\n                    name=\"yeastDump1\"\r\n                    productionTankDate={props.yeastDump1}\r\n                    reduxDate = {props.yeastDump1Redux}\r\n                />\r\n                <Date \r\n                    onChange={props.userInput}\r\n                    label=\"Dump 2\"\r\n                    name=\"yeastDump2\"\r\n                    productionTankDate={props.yeastDump2}\r\n                    reduxDate = {props.yeastDump2Redux}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default YeastAction;","import {connect} from 'react-redux';\r\nimport YeastAction from './Yeast';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      yeastDump1Redux: state.selectTank.yeastDump1,\r\n      yeastDump2Redux: state.selectTank.yeastDump2\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(YeastAction);","import React, { Component } from 'react';\r\n\r\nimport AppBar from './AppComponents/AppBar/AppBarContainer';\r\nimport Button from './AppComponents/SubComponents/Button';\r\nimport Brix from './AppComponents/Brix/BrixContainer';\r\nimport CIP from './AppComponents/CIP/CIPContainer';\r\nimport FermenterIcon from './FermenterIcon/FermenterIconContainer';\r\nimport Nav from '../Nav/Nav';\r\nimport Sanitize from './AppComponents/Sanitize/SanitizeContaner';\r\nimport Spund from './AppComponents/Spund/SpundContainer';\r\nimport TemperatureList from './AppComponents/Temperature/TemparatureContainer';\r\nimport Yeast from './AppComponents/Yeast/YeastContainer';\r\n\r\nimport {updateFermentation, clearFermenter} from './ProductionFetch';\r\n\r\nimport '../../App.css';\r\n\r\nclass ProductionTank extends Component  {\r\n\r\n    state = {\r\n        status: \"\",\r\n        tankTemp: \"\",\r\n        fermentingBrix:\"\",\r\n        spund: false,\r\n        spundPressure: \"\",\r\n        yeastDump1: \"\",\r\n        yeastDump2: \"\",\r\n        cip1: \"\",\r\n        cip2: \"\",\r\n        clean: false,\r\n        select: false,\r\n        selectBrix: false,\r\n        selectClean: 0,\r\n        selectSanitize: 0,\r\n        selectSpund: 0,\r\n        selectPSI: false,\r\n        sanitize: false,\r\n        sanitizeSelect: false,\r\n        ppm: \"\"\r\n    }\r\n\r\n    userInput = (e) => {\r\n        const selectName = e.target.name;\r\n        this.setState({\r\n            [selectName]: e.target.value\r\n        })\r\n    }\r\n\r\n    switchToggle = (e) => {\r\n        const selectName = e.target.name\r\n        // conditional rendering of spund toggle\r\n        if(selectName === 'spund' && this.props.reduxSpund && !this.state.spund && this.state.selectSpund === 0) {\r\n            this.setState({spund: false})\r\n            this.changeToggleSelect(e) \r\n        } else if (selectName === 'clean' && this.props.reduxClean && !this.state.clean && this.state.selectClean === 0) {\r\n            this.setState({clean: false}, () => {\r\n                this.setState({\r\n                    status: \"dirty\"\r\n                }) \r\n            })\r\n            this.changeToggleSelect(e)\r\n        } else if(selectName === 'sanitize' && this.props.reduxSanitize && !this.state.sanitize && this.state.selectSanitize === 0) {\r\n            this.setState({sanitize: false}, () => {\r\n                this.setState({\r\n                    status: \"clean\"\r\n                }) \r\n            })\r\n            this.changeToggleSelect(e) \r\n        } else {\r\n            this.setState({\r\n                [selectName] : !this.state[selectName]\r\n            }, () => {\r\n                this.changeStatus();  \r\n            })\r\n            this.changeToggleSelect(e) \r\n        }              \r\n    }\r\n\r\n    changeStatus = () => {\r\n        if (this.state.sanitize) {\r\n            this.setState({\r\n                status: \"sanitize\"\r\n            })\r\n        } else if (this.state.clean || (this.props.reduxClean && !this.state.selectClean) && !this.props.reduxRunOff) {\r\n            this.setState({\r\n                status: \"clean\"\r\n            })\r\n        } else if(!this.props.reduxRunOff) {\r\n            this.setState({\r\n                status: \"dirty\"\r\n            })\r\n        }\r\n    }\r\n\r\n    statusUpdate = (value) => {\r\n        this.setState({\r\n            status: value\r\n        })\r\n    }\r\n\r\n    changeSelect = (e) => {\r\n        const selectName = e.target.id;\r\n        this.setState({\r\n            [selectName]: !this.state[selectName]\r\n        })\r\n    }\r\n\r\n    changeToggleSelect = (e) => {\r\n        const selectName = e.target.id;\r\n        this.setState({\r\n            [selectName]: this.state[selectName] +1\r\n        })\r\n    }\r\n\r\n    renderRedirect = () => {\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    // transfer beer to brite tank, then redirect to main page\r\n    handleTransfer = () => {\r\n        const getParams = this.props.match.params;\r\n        const tankObj = {\r\n            tank: getParams.tank,\r\n            runOff: false,\r\n            status: \"dirty\"\r\n        }\r\n        console.log(tankObj)\r\n        clearFermenter(getParams.tank, this.props.number, tankObj)\r\n            .then (() => {\r\n                this.renderRedirect()\r\n            })\r\n            .catch(err => {\r\n                console.error('Request failed', err)\r\n            })\r\n    }\r\n\r\n    sendUpdate = () => {\r\n        const tankObj= {};\r\n        const loopState = Object.entries(this.state);\r\n        for (const [key, value] of loopState) {\r\n            if (value && (key === 'tankTemp' || key === 'fermentingBrix')) {\r\n                tankObj[key] = {\r\n                    [key]: value,\r\n                    date: new Date()\r\n                }\r\n            } else if (!value && \r\n                     ((key === 'clean' && this.state.selectClean) \r\n                     || (key === 'spund' && this.state.selectSpund)\r\n                     || (key === 'sanitize' && this.state.selectSanitize))) \r\n            {\r\n                  tankObj[key] = this.state[key]\r\n            } else if(value && key !== 'selectSpund' && key !== 'selectClean' && key !== 'selectSanitize') {\r\n                tankObj[key] = value;\r\n            }\r\n        }\r\n        console.log(tankObj)\r\n        // fetch to update fermentation tank then redirect to homepage\r\n        updateFermentation(tankObj,this.props.tank,this.props.number)\r\n            .then(() => {\r\n                this.renderRedirect()\r\n            })\r\n            .catch(err => {\r\n                console.error('Request failed', err)\r\n            })\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n        // fetch current tank from url params and update store\r\n        const getTankParams = this.props.match.params;\r\n        this.props.setTank(getTankParams.tank)\r\n            .catch(err => {\r\n                console.error('Request failed', err)\r\n            }); \r\n    }\r\n    \r\n    \r\n    render () {\r\n        const renderStatus = (redux,component) => {\r\n            if(component !== '') {\r\n                if(component === 'fermenting') {\r\n                    return component\r\n                }\r\n            } else {\r\n                if(redux === 'fermenting') {\r\n                    return redux\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <main>\r\n                {this.props.tank \r\n                    ?\r\n                    <div>\r\n                        <Nav />\r\n                            <div id=\"fermentationBox\">\r\n                                <FermenterIcon  componentStatus= {this.state.status}/>\r\n                                <section id = \"fermentationFormBox\">\r\n                                    <div id=\"fermentationForm\">\r\n                                        <AppBar statusUpdate={this.statusUpdate} componentStatus = {this.state.status}/>\r\n                                        {this.props.status === 'fermenting' || this.props.status === 'conditioning'\r\n                                            ?\r\n                                            <div>\r\n                                                <TemperatureList \r\n                                                    userInput={this.userInput} \r\n                                                    tankTemp={this.state.tankTemp}\r\n                                                    changeSelect={this.changeSelect}\r\n                                                    select={this.state.select} \r\n                                                />\r\n                                                {renderStatus(this.props.status, this.state.status)  ? \r\n                                                    <Brix \r\n                                                        userInput={this.userInput} \r\n                                                        fermentingBrix={this.state.fermentingBrix}\r\n                                                        changeBrix={this.changeSelect}\r\n                                                        selectBrix={this.state.selectBrix} \r\n                                                    /> \r\n                                                    : \r\n                                                    <Yeast \r\n                                                        userInput={this.userInput} \r\n                                                        yeastDump2 = {this.state.yeastDump2} \r\n                                                        yeastDump1 = {this.state.yeastDump1}\r\n                                                    />\r\n                                                }\r\n                                                <Spund \r\n                                                    toggle={this.switchToggle} \r\n                                                    spund={this.state.spund} \r\n                                                    spundPressure={this.state.spundPressure}\r\n                                                    userInput={this.userInput}\r\n                                                    selectSpund = {this.state.selectSpund}\r\n                                                    changeSelect = {this.changeSelect}\r\n                                                    selectPSI = {this.state.selectPSI}\r\n                                                />\r\n                                                <div className=\"fermentationData\" id=\"fermentationSave\">\r\n                                                    <Button \r\n                                                        words=\"Save Updates\" \r\n                                                        id=\"saveButton\" \r\n                                                        onClick = {this.sendUpdate} \r\n                                                    />\r\n                                                    {this.state.yeastDump2 || this.props.yeast2 \r\n                                                        ?\r\n                                                        <Button\r\n                                                            words=\"Tranfer to Brite\"\r\n                                                            id=\"transferButton\"\r\n                                                            onClick = {this.handleTransfer}\r\n                                                        />\r\n                                                        :\r\n                                                        null\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                            :\r\n                                            <div>\r\n                                                {this.props.status === 'dirty' || \r\n                                                 this.props.status === 'clean' || \r\n                                                 this.props.status === 'sanitize'\r\n                                                    ?\r\n                                                    <div>\r\n                                                        <CIP \r\n                                                            userInput={this.userInput} \r\n                                                            productionTankDateB = {this.state.cip2} \r\n                                                            productionTankDateA = {this.state.cip1}\r\n                                                            clean = {this.state.clean}\r\n                                                            toggle={this.switchToggle}\r\n                                                            selectClean = {this.state.selectClean}\r\n                                                        />                                                \r\n                                                        {this.state.clean || (this.props.reduxClean && !this.state.selectClean)\r\n                                                            ?\r\n                                                            <Sanitize \r\n                                                                sanitize = {this.state.sanitize}\r\n                                                                sanitizeDate = {this.state.sanitizeDate}\r\n                                                                toggle = {this.switchToggle}\r\n                                                                userInput={this.userInput}\r\n                                                                changeSanitize={this.changeSelect}\r\n                                                                selectSanitize={this.state.selectSanitize}\r\n                                                                sanitizeSelect = {this.state.sanitizeSelect}\r\n                                                                ppm = {this.state.ppm}\r\n                                                            />\r\n                                                            :\r\n                                                            null\r\n                                                        }\r\n                                                            <div className=\"fermentationData\" id=\"fermentationSave\">\r\n                                                                <Button \r\n                                                                    words=\"Save Updates\" \r\n                                                                    id=\"saveButton\" \r\n                                                                    onClick = {this.sendUpdate} \r\n                                                                />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        :\r\n                                                        null                                                 \r\n                                                }\r\n                                            </div>\r\n                                        }\r\n                                    </div>\r\n                                </section>\r\n                            </div>\r\n                        </div>\r\n                    :\r\n                <Nav/>                \r\n            }\r\n        </main>\r\n        )      \r\n    }\r\n    \r\n    \r\n}\r\n\r\nexport default ProductionTank;","\r\n\r\nexport function updateFermentation(data,tank,batch) {\r\n    return fetch(`/fermenters/${tank}/brew/${batch}`, {\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        },\r\n        method: 'PUT'\r\n      })\r\n}\r\n\r\nexport function getFermenter(tank) {\r\n  return fetch(`/fermenters/${tank}`, {\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n      method: 'GET'\r\n    })\r\n}\r\n\r\nexport function clearFermenter(tank,batch,data) {\r\n  return fetch(`/fermenters/${tank}/transfer/${batch}`, {\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n      method: 'PUT'\r\n    })\r\n} ","import { getFermenter } from \"./ProductionFetch\";\r\n\r\nexport function setTank(tank) {\r\n    return function (dispatch) {\r\n        return getFermenter(tank)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                dispatch({\r\n                        type: \"SET_TANK\",\r\n                        value: data[0]\r\n                        })\r\n                })\r\n    }\r\n}","import {connect} from 'react-redux';\r\nimport ProductionTank from './ProductionTank';\r\nimport {setTank} from './ProductionActions';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      status: state.selectTank.status,\r\n      temp: state.selectTank.tankTemp,\r\n      number: state.selectTank.number,\r\n      tank: state.selectTank.tank,\r\n      close: state.selectTank.spund,\r\n      pressure: state.selectTank.spundPressure,\r\n      yeast2: state.selectTank.yeastDump2,\r\n      reduxClean: state.selectTank.clean,\r\n      reduxRunOff: state.selectTank.runOff,\r\n      reduxSanitize: state.selectTank.sanitize,\r\n      reduxSpund: state.selectTank.spund\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setTank: tank => dispatch(setTank(tank))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductionTank);","import '../../../App.css';\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n\r\n    formControl: {\r\n      margin: theme.spacing.unit,\r\n    },\r\n    \r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit,\r\n        width: 200,\r\n        backgroundColor: '#d1d0bb',\r\n      },\r\n    \r\n    input: {\r\n        color: '#5c4925',\r\n        fontSize: 15\r\n    },\r\n\r\n      cssLabel: {\r\n        '&$cssFocused': {\r\n          color: '#5c4925',\r\n          fontWeight: 'bold',\r\n          fontSize: 15\r\n        },\r\n      },\r\n      cssFocused: {\r\n      },\r\n      cssUnderline: {\r\n        '&:after': {\r\n          borderBottomColor: '#5c4925',\r\n        },\r\n      },\r\n      cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n          borderColor: '#5c4925',\r\n        },\r\n      },\r\n\r\n      notchedOutline: {\r\n      },\r\n  });\r\n\r\n\r\n \r\n\r\n  const StyleBatch = (props) => {\r\n    const {classes} = props;\r\n    const previousBatch = props.brewBatch.prevNum;\r\n    const batchNum = props.brewBatch.number;\r\n    const batchEnter = props.brewBatch.batch.enter;\r\n\r\n\r\n\r\n    const userNumberOptions = () => {\r\n      if (previousBatch && props.brewBatch.batch.prevId !== 'D') {\r\n        const numOptions = [previousBatch, previousBatch+1];\r\n        return numOptions\r\n      } else if (previousBatch && props.brewBatch.batch.prevId === 'D') {\r\n        return [previousBatch+1]\r\n      } else if (!previousBatch && batchNum) {\r\n        const num = [batchNum];\r\n        return num\r\n      } else {\r\n        return [1];\r\n      }\r\n    }\r\n\r\n    const userIdOptions = () => {\r\n      if(previousBatch === batchNum) {\r\n          const getLastId = props.brewBatch.batch.prevId;\r\n          const toChar = getLastId.charCodeAt(0)\r\n          const optionArr = [];\r\n\r\n          for(let i=toChar+1; i<69; i++) {\r\n              optionArr.push(i);\r\n          }\r\n\r\n          const letterOptions = optionArr.map ( num => {\r\n              return String.fromCharCode(num)\r\n          })\r\n\r\n          return letterOptions;\r\n      } else if (previousBatch !== batchNum && !batchEnter) {\r\n         let optionB = [];\r\n         return optionB=['A'];\r\n      } else if(batchEnter) {\r\n         let optionC = [];\r\n        return optionC = [props.brewBatch.batch.id]\r\n      } else {\r\n        let optionD = [];\r\n        return optionD=[batchNum];\r\n      }\r\n    }\r\n\r\n    const styleOptions = () => {\r\n      let style = ['Goat', 'BucketHead', 'Dillo', 'Pailhead', 'Specialty']\r\n      const currentStyle = [props.brewBatch.style]\r\n      if (previousBatch === batchNum) {\r\n        style = [props.brewBatch.prevStyle];\r\n        return style\r\n      } else if (previousBatch !== batchNum && previousBatch === '') {\r\n        return currentStyle\r\n      } else {\r\n        return style\r\n      }\r\n    }\r\n\r\n    const tankOptions = () => {\r\n      let openTanks = props.brewBatch.openTanks;\r\n      const currentTank = [props.brewBatch.tank];\r\n      let tank = [\"C2\", \"C3\", \"C4\", \"C5\", \"C6\", \"C7\"]\r\n      if (previousBatch === batchNum) {\r\n        tank = [props.brewBatch.prevTank];\r\n        return tank\r\n      } else if (previousBatch !== batchNum && previousBatch !== '' && props.brewBatch.tank !== \"\") {\r\n        return openTanks\r\n      } else if (previousBatch !== batchNum && previousBatch !== '') {\r\n        return openTanks\r\n      } else if (previousBatch !== batchNum && previousBatch === '') {        \r\n        return currentTank\r\n      } else {\r\n        return tank\r\n      }\r\n    }\r\n\r\n    const inputNames = ['Brew Number', 'Brew Letter', 'Style', 'Tank'];\r\n\r\n    const inputs = [\r\n        {\r\n          name:\"number\",\r\n          value: batchNum,\r\n          onChange: props.handleBrewNumber,\r\n          options: userNumberOptions()\r\n        },\r\n        {\r\n          name:\"id\",\r\n          value: props.brewBatch.batch.id,\r\n          onChange: props.handleBatch,\r\n          options: userIdOptions()\r\n        },\r\n        {\r\n          name:\"style\",\r\n          value: props.brewBatch.style,\r\n          onChange: props.handleBrewNumber,\r\n          options: styleOptions()\r\n        },\r\n        {\r\n          name:\"tank\",\r\n          value: props.brewBatch.tank,\r\n          onChange: props.handleBrewNumber,\r\n          options: tankOptions()\r\n        }\r\n      ];\r\n\r\n      \r\n\r\n    return (\r\n      inputs.map((input,index) =>\r\n            <TextField\r\n                select\r\n                value={input.value}\r\n                onChange={input.onChange}\r\n                name = {input.name}\r\n                key ={index} \r\n                className={classes.textField} \r\n                variant=\"outlined\" \r\n                label= {inputNames[index]}\r\n                margin=\"normal\"\r\n                InputLabelProps={{\r\n                    classes: {\r\n                      root: classes.cssLabel,\r\n                      focused: classes.cssFocused,\r\n                    },\r\n                  }} \r\n                InputProps={{classes: \r\n                    { root: classes.cssOutlinedInput,\r\n                      focused: classes.cssFocused,\r\n                      notchedOutline: classes.notchedOutline,\r\n                      input: classes.input,\r\n                    },\r\n                    readOnly: batchEnter\r\n                  }}  > \r\n\r\n                  {input.options \r\n                    ? \r\n                      input.options.map( (option, index) =>\r\n                        <MenuItem key={index} value={option}>\r\n                          {option}\r\n                        </MenuItem>\r\n                        )\r\n                  : null}\r\n              </TextField>\r\n              \r\n          )\r\n        )\r\n\r\n  }\r\n\r\n  export default withStyles(styles)(StyleBatch);\r\n\r\n  ","import '../../../App.css';\r\nimport React from 'react';\r\nimport StyleBatch from './StyleBatch';\r\n\r\n\r\nconst StartBatch = (props) => {\r\n    return (\r\n      <section className=\"userInputs\">\r\n          <h2>Brew Information</h2>\r\n          <form className=\"batchValue\">\r\n              <StyleBatch {...props} />\r\n          </form>\r\n          <div id=\"batchEnter\">\r\n              {!props.brewBatch.batch.enter\r\n                ? \r\n                <button onClick={props.handleEnter} className=\"allButtons\">Enter Batch</button> \r\n                : \r\n                <button onClick={props.handleDelete} className=\"allButtons\">Delete Batch</button>\r\n              }\r\n          </div>\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default StartBatch;","import '../../../App.css';\r\nimport React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n\r\n    formControl: {\r\n      margin: theme.spacing.unit,\r\n    },\r\n\r\n    textField: {\r\n        marginLeft: theme.spacing.unit,\r\n        marginRight: theme.spacing.unit,\r\n        backgroundColor: '#d1d0bb',\r\n      },\r\n    \r\n    input: {\r\n        color: '#5c4925'\r\n    },\r\n\r\n      cssLabel: {\r\n        '&$cssFocused': {\r\n          color: '#5c4925',\r\n          fontWeight: 'bold',\r\n          fontSize: 15\r\n        },\r\n      },\r\n      cssFocused: {},\r\n      cssUnderline: {\r\n        '&:after': {\r\n          borderBottomColor: '#5c4925',\r\n        },\r\n      },\r\n      cssOutlinedInput: {\r\n        '&$cssFocused $notchedOutline': {\r\n          borderColor: '#5c4925',\r\n        },\r\n      },\r\n\r\n      notchedOutline: {\r\n      },\r\n  });\r\n\r\n  const BrewMetricsStyle = (props) => {\r\n    const {classes} = props;\r\n\r\n    const inputNames = ['Strike Volume', 'Mash Temp', 'Sparge Volume', \r\n                        'Kettle Brix', 'Kettle Volume', 'Whirlpool Volume',\r\n                        'Flow Meter Volume','Run Off Temperature', 'Fermenter Temperature', 'Notes'];\r\n\r\n    const inputs = [\r\n      {\r\n        type: \"number\", \r\n        name:\"strikeVolume\",\r\n        value: props.brewBatch.batch.strikeVolume,\r\n        onChange: props.handleBatch\r\n      },\r\n      {\r\n        type: \"number\", \r\n        name:\"mashTemp\",\r\n        value: props.brewBatch.batch.mashTemp,\r\n        onChange: props.handleBatch\r\n      },\r\n      {\r\n        type: \"number\", \r\n        name:\"spargeVolume\",\r\n        value: props.brewBatch.batch.spargeVolume,\r\n        onChange: props.handleBatch\r\n      },\r\n      {\r\n        type: \"number\", \r\n        name:\"startingBrix\",\r\n        value: props.brewBatch.batch.startingBrix,\r\n        onChange: props.handleBatch\r\n      },\r\n      {\r\n        type: \"number\", \r\n        name:\"kettleVolume\",\r\n        value: props.brewBatch.batch.kettleVolume,\r\n        onChange: props.handleBatch\r\n      },\r\n      {\r\n        type: \"number\", \r\n        name:\"whirlPoolVolume\",\r\n        value: props.brewBatch.batch.whirlPoolVolume,\r\n        onChange: props.handleBatch\r\n      },\r\n      {\r\n        type: \"number\", \r\n        name:\"fmVolume\",\r\n        value: props.brewBatch.batch.fmVolume,\r\n        onChange: props.handleBatch,\r\n        required: true\r\n      },\r\n      {\r\n        type: \"number\", \r\n        name:\"runOffTemp\",\r\n        value: props.brewBatch.batch.runOffTemp,\r\n        onChange: props.handleBatch,\r\n        required: true\r\n      },\r\n      {\r\n        type: \"number\", \r\n        name: \"tankTemp\",\r\n        value: props.brewBatch.batch.tankTemp,\r\n        onChange: props.handleBatch,\r\n        required: true\r\n      },\r\n      {\r\n        type: \"text\", \r\n        name:\"notes\",\r\n        value: props.brewBatch.batch.notes,\r\n        onChange: props.handleBatch\r\n      }\r\n    ];\r\n\r\n    return (\r\n      inputs.map((input,index) =>\r\n        <TextField\r\n            value={input.value}\r\n            onChange={input.onChange}\r\n            type= {input.type}\r\n            name = {input.name}\r\n            key ={index} \r\n            className={classes.textField} \r\n            variant=\"outlined\" \r\n            label= {inputNames[index]}\r\n            margin=\"normal\"\r\n            required = {input.required}\r\n            InputLabelProps={{\r\n                classes: {\r\n                  root: classes.cssLabel,\r\n                  focused: classes.cssFocused,\r\n                },\r\n              }} \r\n            InputProps={{classes: \r\n                { root: classes.cssOutlinedInput,\r\n                  focused: classes.cssFocused,\r\n                  notchedOutline: classes.notchedOutline,\r\n                  input: classes.input\r\n                }\r\n          }}  >\r\n        </TextField>\r\n      )\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  export default withStyles(styles)(BrewMetricsStyle);","import '../../../App.css';\r\nimport React from 'react';\r\nimport BrewMetricsStyle from './BrewMetricsStyle';\r\n\r\nconst BrewMetrics = (props) => {\r\n    return (\r\n        <section className=\"userInputs\">\r\n            <h2>Brew Data</h2>\r\n            <form className=\"batchValue\">\r\n                <BrewMetricsStyle {...props} />\r\n            </form>\r\n        </section>\r\n    )\r\n    \r\n}\r\n\r\n\r\n\r\nexport default BrewMetrics;","import '../../../App.css';\r\nimport React from 'react';\r\n\r\n\r\nconst Transfer = (props) => {\r\n\r\n    return (\r\n        <button className=\"allButtons\" onClick={props.handleTransfer}>\r\n           Runoff To {props.brewBatch.tank} \r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Transfer;","import React from 'react';\r\nimport Nav from '../Nav/Nav';\r\nimport '../../App.css';\r\nimport StartBatch from './StartBatch/StartBatch';\r\nimport BrewMetrics from './BrewMetrics/BrewMetrics';\r\nimport Transfer from './Transfer/Transfer';\r\n\r\nconst BrewView = (props) => {\r\n\r\n    return (\r\n        <main id=\"brewMain\">\r\n            <Nav />\r\n            <section id=\"startBatch\">\r\n                <StartBatch {...props} />\r\n                {props.brewBatch.batch.enter ? \r\n                    <section>\r\n                        <BrewMetrics {...props}/>\r\n                        <Transfer {...props} /> \r\n                    </section>\r\n                    : \r\n                    null\r\n                }\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default BrewView;","\r\nexport function createNewBatch(batch) {\r\n    return fetch(`/brews/${batch.number}/batches/${batch.batch.id}`, {\r\n        body: JSON.stringify(batch),\r\n        headers: {\r\n          'content-type': 'application/json'\r\n        },\r\n        method: 'POST'\r\n      }).catch(err => {\r\n        console.error('Request failed', err)\r\n      })\r\n}\r\n\r\nexport function addNewBrew(batch) {\r\n  return fetch(`/brews/${batch.number}/batches/${batch.batch.id}`, {\r\n    body: JSON.stringify(batch),\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    method: 'PUT'\r\n  }).catch(err => {\r\n    console.error('Request failed', err)\r\n  })\r\n}\r\n\r\nexport function updateBatch(batchObj) {\r\n    return fetch(`/brews/${batchObj.number}/batches/${batchObj.batch.id}`, {\r\n      body: JSON.stringify(batchObj),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n      method: 'PATCH'\r\n      })\r\n}\r\n\r\n// Putting batch into a tank. Not sure this is the best organizational practice. Wondering if I can use redux to change the state. Will componentDidMount retrieve information\r\nexport function fillFermenters(id, tankObj, batch) {\r\n  return fetch(`/fermenters/${tankObj.tank}/brew/${id}/batch/${batch}`, {\r\n    body: JSON.stringify(tankObj),\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    method: 'PUT'\r\n    })\r\n}\r\n\r\n\r\nexport function getBatch() {\r\n  return fetch(\"/brews\", {\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n      method: 'GET'\r\n    })\r\n    .then(response => response.json())\r\n}\r\n\r\nexport function getLastSubmit() {\r\n  return fetch(\"/brews/lastsubmittal\", {\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    method: 'GET'\r\n    })\r\n    .then(response => response.json())\r\n}\r\n\r\nexport function deleteBrew(number) {\r\n  return fetch(`/brews/${number}`, {\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    method: 'DELETE'\r\n    })\r\n    .catch(err => {\r\n      console.error('Request failed', err)\r\n    })\r\n}\r\n\r\nexport function deleteBatch(number, id) {\r\n  return fetch(`/brews/${number}/batches/${id}`, {\r\n    headers: {\r\n      'content-type': 'application/json'\r\n    },\r\n    method: 'DELETE'\r\n    }).catch(err => {\r\n      console.error('Request failed', err)\r\n    })\r\n} ","import React, {Component} from 'react';\r\nimport BrewView from './BrewView';\r\nimport {createNewBatch, addNewBrew, getBatch, updateBatch, fillFermenters, getLastSubmit, deleteBrew, deleteBatch} from './BrewFetch';\r\nimport {getFermenters} from '../Home/Fermenter/FermenterFetch';\r\n\r\nclass BrewContainer extends Component {\r\n// put inside class container\r\n// use proptypes and set default values\r\n    state = {\r\n      number: '',\r\n      prevNum: '',\r\n      style: '',\r\n      prevStyle: '',\r\n      tank: '',\r\n      prevTank: '',\r\n      status: '',\r\n      opentTanks: '',\r\n      batch: \r\n          {id: \"\",\r\n           prevId: \"\",\r\n           strikeVolume: \"\",\r\n           mashTemp: \"\",\r\n           spargeVolume: \"\",\r\n           startingBrix: \"\",\r\n           kettleVolume: \"\",\r\n           whirlPoolVolume: \"\",\r\n           fmVolume: \"\",\r\n           tankTemp: \"\",\r\n           runOffTemp: \"\",\r\n           notes: '',\r\n           enter: false,\r\n           submit: false,\r\n          }      \r\n    }\r\n\r\n    // stores the setInterval value\r\n    runInterval = 0;\r\n    \r\n      \r\n    handleBrewNumber = (e) => {\r\n      const name = e.target.name;\r\n      const val = e.target.value;\r\n\r\n      this.setState({ [name]: val });\r\n    }\r\n\r\n    handleBatch = (e) => {\r\n      const { batch } = { ...this.state };\r\n      const currentState = batch;\r\n      const name = e.target.name;\r\n      currentState[name] = e.target.value\r\n\r\n      this.setState({ batch: currentState});\r\n\r\n    }\r\n\r\n    updateMetricData = () => {\r\n      const number = this.state.number;\r\n      const batch = this.state.batch;\r\n      const batchObj = {\r\n        number: number,\r\n        batch: batch,\r\n      }\r\n      \r\n      updateBatch(batchObj)\r\n      .catch(err => {\r\n        console.error('Request failed', err)\r\n      })\r\n    }\r\n\r\n    handleEnter = (e) => {\r\n      e.preventDefault();\r\n      this.setState({ \r\n        batch: {\r\n            ...this.state.batch,\r\n            enter: !this.state.enter\r\n          }}, () => {\r\n            const getData = this.state;\r\n            if (this.state.prevNum === this.state.number) {\r\n              // fetch call to update a brew with a new batch. There a multiple batches to a brew\r\n              addNewBrew(getData);\r\n            } else {\r\n              // fetch call to create a new batch into a new brew\r\n              createNewBatch(getData);\r\n            }\r\n            this.runInterval = setInterval(() => this.updateMetricData(),30000)\r\n          });   \r\n    }\r\n\r\n    handleDelete = () => {\r\n      const number = this.state.number;\r\n      const id = this.state.batch.id;\r\n\r\n      if(id === 'A') {\r\n        clearInterval(this.runInterval);\r\n        deleteBrew(number)\r\n        this.setState({\r\n          batch: {\r\n            ...this.state.batch,\r\n            strikeVolume: \"\",\r\n            mashTemp: \"\",\r\n            spargeVolume: \"\",\r\n            startingBrix: \"\",\r\n            kettleVolume: \"\",\r\n            whirlPoolVolume: \"\",\r\n            fmVolume: \"\",\r\n            tankTemp: \"\",\r\n            runOffTemp: \"\",\r\n            notes: '',\r\n            enter: !this.state.batch.enter\r\n          }\r\n        })      \r\n      } else {\r\n        clearInterval(this.runInterval);\r\n        deleteBatch(number,id);\r\n        this.setState({\r\n          number: \"\",\r\n          style: \"\",\r\n          tank: \"\",\r\n          batch : {\r\n            ...this.state.batch,\r\n            strikeVolume: \"\",\r\n            mashTemp: \"\",\r\n            spargeVolume: \"\",\r\n            startingBrix: \"\",\r\n            kettleVolume: \"\",\r\n            whirlPoolVolume: \"\",\r\n            fmVolume: \"\",\r\n            tankTemp: \"\",\r\n            runOffTemp: \"\",\r\n            notes: '',\r\n            id: \"\",\r\n            enter: !this.state.batch.enter\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    handleTransfer = () => {\r\n      // change to async await and try/catch. research and update\r\n      this.setState({\r\n        status: \"fermenting\",\r\n        batch: {\r\n        ...this.state.batch,\r\n        submit: !this.state.submit\r\n        }}, () => {\r\n        const id = this.state.number;\r\n        const tank = this.state.tank;\r\n        const style = this.state.style;\r\n        const runOff = this.state.batch.submit\r\n        const batch = this.state.batch;\r\n        const batchObj = {\r\n            number: id,\r\n            batch: batch\r\n        }\r\n        const tankObj = {\r\n            number: id,\r\n            tank: tank,\r\n            style: style,\r\n            batch: batch.fmVolume,\r\n            brix: this.state.batch.startingBrix,\r\n            runOff: runOff,\r\n            tankTemp: this.state.batch.tankTemp,\r\n            status: this.state.status\r\n        }\r\n        \r\n        updateBatch(batchObj)\r\n          .then(() => {\r\n            fillFermenters(id, tankObj, batch.id)\r\n              .then(() => {\r\n                this.renderRedirect();\r\n              });\r\n          })\r\n          .catch(err => {\r\n            console.error('Request failed', err)\r\n          })\r\n        })      \r\n    }\r\n\r\n    componentWillUnmount = () => {\r\n      clearInterval(this.runInterval);\r\n    }\r\n\r\n    // user get redirected to homepage after clicking on Runoff Button\r\n    renderRedirect = () => {\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    // change data from componentdidmount fetch to \"\" instead of null\r\n    changeNull = (data) => {\r\n        const batchVal = data.batch[data.batch.length-1];\r\n        \r\n        for (let val in batchVal) {\r\n          const values = batchVal[val]\r\n          if (typeof values === 'object') {\r\n            batchVal[val] = '';\r\n          }\r\n        }\r\n        return data\r\n    }\r\n    // set state after fetch call with data from a batch where brewer is still entering information\r\n    updateStateBatchBrewing = (data) => {\r\n      const lastBatch = data.batch[data.batch.length-1];\r\n      this.setState(\r\n        {\r\n          number: data.number,\r\n          style: data.style,\r\n          tank: data.tank,\r\n          status: data.status,\r\n          batch: {\r\n            id: lastBatch.id,\r\n            strikeVolume: lastBatch.strikeVolume,\r\n            mashTemp: lastBatch.mashTemp,\r\n            spargeVolume: lastBatch.spargeVolume,\r\n            startingBrix: lastBatch.startingBrix,\r\n            kettleVolume: lastBatch.kettleVolume,\r\n            whirlPoolVolume: lastBatch.whirlPoolVolume,\r\n            fmVolume: lastBatch.fmVolume,\r\n            tankTemp: lastBatch.tankTemp,\r\n            runOffTemp: lastBatch.runOffTemp,\r\n            notes: lastBatch.notes,\r\n            enter: lastBatch.enter,\r\n            submit: lastBatch.submit\r\n          }\r\n        })\r\n    }\r\n\r\n    // set state after fetch call with data from a batch that has been finished and placed into a fermenter\r\n    updateStateLastCompletedBrew = (data) => {\r\n      const findLastSubmit = data;\r\n      const batchArr = findLastSubmit.batch\r\n      for(let i=batchArr.length-1; i >= 0; i--) {\r\n        if (batchArr[i].submit === true) {\r\n          return this.setState({\r\n            prevNum: data.number,\r\n            prevStyle: data.style,\r\n            prevTank: data.tank,\r\n            batch: {\r\n              ...this.state.batch,\r\n              prevId: batchArr[i].id\r\n            }\r\n          })\r\n        } \r\n      }\r\n    }\r\n\r\n    inputBatchSequence = () => {\r\n      getBatch()\r\n          .then(data => {\r\n            const brewIsEnterObj = data[0];      \r\n            if (brewIsEnterObj !== undefined) {\r\n                this.changeNull(brewIsEnterObj)\r\n                this.updateStateBatchBrewing(brewIsEnterObj)\r\n                getLastSubmit()\r\n                  .then(lastBrewEnter => {\r\n                    this.updateStateLastCompletedBrew(lastBrewEnter);\r\n                  })\r\n                  .then(() =>{\r\n                    this.runInterval = setInterval(() => this.updateMetricData(),30000)\r\n                  }).catch(err => {\r\n                    console.error('Request failed', err)\r\n                  }) \r\n                                            \r\n              } else {\r\n                // if last batch has runOff to fermenter get information from this batch for input options\r\n                getLastSubmit()\r\n                    .then(data => {\r\n                        this.updateStateLastCompletedBrew(data);\r\n                      })\r\n                      .catch(err => {\r\n                        console.error('Request failed', err)\r\n                      });\r\n              }\r\n        })\r\n        .catch(err => {\r\n          console.error('Request failed', err)\r\n        })\r\n        // get open fermenters\r\n        getFermenters()\r\n                  .then(response => response.json())\r\n                  .then(data => {\r\n                  // FIND only empty tanks\r\n                    const emptyTanks = data.reduce( (acc,tank) => {\r\n                        if(!tank.runOff) {\r\n                          acc.push(tank.tank);\r\n                        }\r\n                        return acc\r\n                    }, [])\r\n                    this.setState({\r\n                      openTanks: emptyTanks\r\n                    })\r\n                }).catch(err => {\r\n                    console.error('Request failed', err)\r\n                })                  \r\n    }\r\n  \r\n    componentDidMount = () => {\r\n       this.inputBatchSequence();\r\n    }\r\n\r\n    render () {\r\n      return(\r\n        <div>\r\n            <BrewView \r\n              brewBatch={this.state} \r\n              handleBrewNumber={this.handleBrewNumber} \r\n              handleBatch={this.handleBatch} \r\n              handleEnter={this.handleEnter}\r\n              handleTransfer={this.handleTransfer}\r\n              handleDelete={this.handleDelete}\r\n            />\r\n        </div>\r\n        )\r\n    }  \r\n}\r\nexport default BrewContainer;","import React, { Component } from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Home from './Components/Home/Home';\r\nimport ProductionTank from './Components/ProductionTank/ProductionContainer';\r\nimport Brew from './Components/Brew/Brew';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  \r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className='App'>\r\n        <Switch>\r\n          <Route path ='/' exact render ={ (props) => <Home {...props}/> } />\r\n          <Route path ='/Brew' render ={ (props) => <Brew {...props}/> } />\r\n          <Route path ='/ProductionTank/:tank' render ={ (props) => <ProductionTank {...props}/> } />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from \"./store\";\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}